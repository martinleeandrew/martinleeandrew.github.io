{
  "version": 3,
  "sources": ["../../free-astro-components/src/index.js", "../../free-astro-components/src/utils/utils.ts", "../../free-astro-components/src/utils/modal.ts"],
  "sourcesContent": ["export { default as Icon } from './components/Icon.astro'\nexport { default as Button } from './components/Button.astro'\nexport { default as Checkbox } from './components/Checkbox.astro'\nexport { default as Radio } from './components/Radio.astro'\nexport { default as Switch } from './components/Switch.astro'\nexport { default as Input } from './components/Input.astro'\nexport { default as Textarea } from './components/Textarea.astro'\nexport { default as Select } from './components/Select.astro'\nexport { default as Tab } from './components/Tab.astro'\nexport { default as TabItem } from './components/TabItem.astro'\nexport { default as ThemeSwitch } from './components/ThemeSwitch.astro'\nexport { default as Modal } from './components/Modal.astro'\nexport { default as ModalHeader } from './components/ModalHeader.astro'\nexport { default as ModalBody } from './components/ModalBody.astro'\nexport { default as ModalFooter } from './components/ModalFooter.astro'\nexport { openModal } from './utils/modal.ts'\nexport { closeModal } from './utils/modal.ts'\nexport { default as Accordion } from './components/Accordion.astro'\nexport { default as AccordionItem } from './components/AccordionItem.astro'\n", "let lastWidth: number;\n\nexport const DOMLoaded = (callback: () => void) => {\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', callback)\n  } else {\n    callback()\n  }\n}\n\nexport const debounce = (callback: (...args: any[]) => void, delay: number) => {\n  let timeout: number\n\n  return (...args: any[]) => {\n    clearTimeout(timeout)\n    timeout = window.setTimeout(() => callback(...args), delay)\n  }\n}\n\nexport const handleResize = (callback: () => void) => {\n  const debouncedCallback = debounce(callback, 300)\n  window.addEventListener('resize', debouncedCallback)\n\n  return () => {\n    window.removeEventListener('resize', debouncedCallback)\n  }\n}\n\nexport const isTouchDevice = () => {\n  return window.matchMedia('(pointer: coarse)').matches\n}\n\nexport const hasViewportWidthChanged = (): boolean => {\n  if (typeof window !== 'undefined') {\n    const currentWidth = window.innerWidth;\n    const widthChanged = currentWidth !== lastWidth;\n\n    if (widthChanged) {\n      lastWidth = currentWidth;\n    }\n\n    return widthChanged;\n  }\n\n  return false;\n};\n", "import { isTouchDevice } from '../utils/utils'\n\nexport const openModal = (modal: HTMLDialogElement) => {\n  const body = document.body\n\n  body.style.overflow = 'hidden'\n  modal.classList.remove('ac-modal--close')\n  modal.showModal()\n\n  if (isTouchDevice()) {\n    enableTouchControls(modal)\n  }\n\n  modal.addEventListener(\n    'click',\n    (event) => {\n      if (event.target === modal) {\n        closeModal(modal)\n      }\n    },\n    { once: true },\n  )\n}\n\nexport const closeModal = (modal: HTMLDialogElement) => {\n  const body = document.body\n  modal.close()\n  if (isTouchDevice()) {\n    disableTouchControls(modal)\n  }\n  setTimeout(() => {\n    modal.classList.add('ac-modal--close')\n    body.style.overflow = 'auto'\n  }, 200)\n}\n\nconst enableTouchControls = (modal: HTMLDialogElement) => {\n  let startY = 0\n  let currentY = 0\n  let isScrolling = false\n\n  const isScrollable = (element: HTMLElement) => {\n    return element.scrollHeight > element.clientHeight\n  }\n\n  const getClosestScrollableElement = (element: HTMLElement) => {\n    while (element && element !== modal) {\n      if (isScrollable(element)) {\n        return element\n      }\n      element = element.parentElement as HTMLElement\n    }\n    return null\n  }\n\n  const isScrollAtTop = (element: HTMLElement) => {\n    return element.scrollTop === 0\n  }\n\n  const handleTouchStart = (event: TouchEvent) => {\n    startY = event.touches[0].clientY\n    const targetElement = event.target as HTMLElement\n    const scrollableElement = getClosestScrollableElement(targetElement)\n\n    if (scrollableElement && !isScrollAtTop(scrollableElement)) {\n      isScrolling = true\n    } else {\n      isScrolling = false\n    }\n  }\n\n  const handleTouchMove = (event: TouchEvent) => {\n    if (isScrolling) return\n    currentY = event.touches[0].clientY\n    const translateY = Math.max(0, currentY - startY)\n\n    modal.style.transition = 'none'\n    modal.style.opacity = `${1 - translateY / 250}`\n    modal.classList.remove('ac-modal--animated')\n    modal.style.transform = `translateY(${translateY}px)`\n\n    if (translateY > 250) {\n      modal.close()\n      modal.classList.add('ac-modal--animated')\n      modal.classList.add('ac-modal--close')\n    }\n  }\n\n  const handleTouchEnd = () => {\n    modal.style.transform = 'translateY(0)'\n    modal.style.opacity = '1'\n    modal.style.transition = 'transform 0.2s ease-in-out'\n  }\n\n  modal.addEventListener('touchstart', handleTouchStart, { passive: true })\n  modal.addEventListener('touchmove', handleTouchMove, { passive: true })\n  modal.addEventListener('touchend', handleTouchEnd, { passive: true })\n  ;(modal as any).handleTouchStart = handleTouchStart\n  ;(modal as any).handleTouchMove = handleTouchMove\n  ;(modal as any).handleTouchEnd = handleTouchEnd\n}\n\nconst disableTouchControls = (modal: HTMLDialogElement) => {\n  modal.removeEventListener('touchstart', (modal as any).handleTouchStart)\n  modal.removeEventListener('touchmove', (modal as any).handleTouchMove)\n  modal.removeEventListener('touchend', (modal as any).handleTouchEnd)\n}\n"],
  "mappings": "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",
  "names": ["default", "default"]
}
